networks:
  proxy-tier:
    ipam:
      config:
        - subnet: 172.10.0.0/24
  hass:
    ipam:
      config:
        - subnet: 172.11.0.0/24
  nextcloud:
  immich:
  calibre:
  vpn:
  grafana:
  webtrees:

secrets:
  db_password:
    file: secrets/db_password
  db_root_password:
    file: secrets/db_root_password
  immich_db_password:
    file: secrets/immich/db_password
  webtrees_password:
    file: secrets/webtrees/password
  webtrees_db_password:
    file: secrets/webtrees/db_password
  webtrees_db_root_password:
    file: secrets/webtrees/db_root_password
  transmission_password:
    file: secrets/transmission_password
  openvpn_creds:
    file: secrets/vpn_creds
  rpc_creds:
    file: secrets/transmission_creds
  digikam_db_password:
    file: secrets/digikam/db_password
  digikam_db_root_password:
    file: secrets/digikam/db_root_password

x-default: &service_default
  tty: true # enable colorized logs
  restart: unless-stopped

services:

  home:
    <<: *service_default
    image: linuxserver/heimdall:${HOME_VERSION}
    container_name: home
    volumes:
      - /srv/config/heimdall:/config
    environment:
      # proxy
      VIRTUAL_HOST: ${HOME_HOST}
      VIRTUAL_PORT: 443
      VIRTUAL_PROTO: https
      LETSENCRYPT_HOST: ${HOME_HOST}
      LETSENCRYPT_EMAIL: ${MY_EMAIL}

      # app
      PUID: ${UID}
      PGID: ${GID}
      TZ: ${TIME_ZONE}
    networks:
      - proxy-tier

  grafana:
    <<: *service_default
    image: grafana/grafana-oss:${GRAFANA_VERSION:-preview}
    container_name: grafana
    user: '${UID}'
    ports:
      - ${GRAFANA_LOCAL_PORT}:3000
    volumes:
      - /srv/config/grafana/app:/var/lib/grafana
    environment:
      # proxy
      VIRTUAL_HOST: ${GRAFANA_HOST}
      VIRTUAL_PORT: 3000
      LETSENCRYPT_HOST: ${GRAFANA_HOST}
      LETSENCRYPT_EMAIL: ${MY_EMAIL}

      # app
      GF_SERVER_ROOT_URL: https://${GRAFANA_HOST}
      GF_SERVER_DOMAIN: ${MY_DOMAIN}

      GF_DATE_FORMATS_FULL_DATE: ddd, D MMM YYYY - h:mm:ssa
      GF_DATE_FORMATS_INTERVAL_SECOND: h:mm:ssa
      GF_DATE_FORMATS_INTERVAL_MINUTE: h:mm
      GF_DATE_FORMATS_INTERVAL_HOUR: D MMM HH:mm
      GF_DATE_FORMATS_INTERVAL_DAY: D MMM
      GF_DATE_FORMATS_INTERVAL_MONTH: MMM YYYY
      GF_DATE_FORMATS_INTERVAL_YEAR: YYYY
    networks:
      - proxy-tier
      - grafana
      - hass

  proxy:
    build: ./proxy
    container_name: reverse-proxy
    tty: true # enable colorized logs
    restart: always
    ports:
      - 80:80
      - 443:443
    volumes:
      - /srv/config/proxy/certs:/etc/nginx/certs:ro
      - /srv/config/proxy/vhost.d:/etc/nginx/vhost.d
      - /srv/config/proxy/html:/usr/share/nginx/html
      - /var/run/docker.sock:/tmp/docker.sock:ro
    labels:
      com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy: 'true'
    networks:
      - proxy-tier

  acme:
    <<: *service_default
    image: nginxproxy/acme-companion:${ACME_VERSION}
    container_name: acme
    restart: always
    depends_on:
      - proxy
    volumes:
      - /srv/config/proxy/certs:/etc/nginx/certs
      - /srv/config/proxy/acme:/etc/acme.sh
      - /srv/config/proxy/vhost.d:/etc/nginx/vhost.d
      - /srv/config/proxy/html:/usr/share/nginx/html
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      # app
      DEFAULT_EMAIL: ${MY_EMAIL}
    networks:
      - proxy-tier

  ddclient:
    <<: *service_default
    image: lscr.io/linuxserver/ddclient:${DD_VERSION}
    container_name: ddclient
    hostname: ddclient
    volumes:
      - /srv/config/dns:/config
    environment:
      # app
      PUID: ${UID}
      PGID: ${GID}
      TZ: ${TIME_ZONE}

  transmission:
    <<: *service_default
    image: haugene/transmission-openvpn:${TRANSMISSION_VERSION}
    container_name: transmission
    cap_add:
      - NET_ADMIN
    devices:
      - /dev/net/tun
    ports:
      - ${TRANSMISSION_WEBUI_PORT}:9091/tcp
    volumes:
      - /srv/config/transmission/config:/config/transmission-home
      - ${DOWNLOADS_DIR}:/downloads
      - ${DOWNLOADS_DIR}/.watch:/watch
      - ${VIDEOS_DIR}:/downloads/videos
    environment:
      # proxy
      VIRTUAL_HOST: ${TRANSMISSION_HOST}
      VIRTUAL_PORT: ${TRANSMISSION_WEBUI_PORT}
      LETSENCRYPT_HOST: ${TRANSMISSION_HOST}
      LETSENCRYPT_EMAIL: ${MY_EMAIL}

      # app
      LOCAL_NETWORK: 192.168.0.0/16
      #LOCAL_NETWORK: 172.10.0.0/24
      TRANSMISSION_DOWNLOAD_DIR: /downloads
      TRANSMISSION_INCOMPLETE_DIR: /downloads/.incomplete
      TRANSMISSION_RPC_PORT: ${TRANSMISSION_WEBUI_PORT}
      PUID: ${UID}
      PGID: ${GID}
      TZ: ${TIME_ZONE}
      HEALTH_CHECK_HOST: archlinux.org
    env_file:
      - secrets/vpn.env
    secrets:
      - rpc_creds
      - openvpn_creds
    networks:
      - proxy-tier
      - hass

  hass:
    <<: *service_default
    image: ghcr.io/home-assistant/home-assistant:${HOME_ASSISTANT_VERSION}
    container_name: home-assistant
    privileged: true
    ports:
      - ${HOME_ASSISTANT_LOCAL_PORT}:8123
    volumes:
      - /srv/config/home-assistant/config:/config
      - /etc/localtime:/etc/localtime:ro
    environment:
      # proxy
      VIRTUAL_HOST: ${HOME_ASSISTANT_HOST}
      VIRTUAL_PORT: 8123
      LETSENCRYPT_HOST: ${HOME_ASSISTANT_HOST}
      LETSENCRYPT_EMAIL: ${MY_EMAIL}
    networks:
      - proxy-tier
      - hass

  zwave-js-ui:
    <<: *service_default
    image: zwavejs/zwave-js-ui:${ZWAVE_JS_VERSION}
    container_name: zwave-js-ui
    stop_signal: SIGINT
    depends_on:
      - hass
    ports:
      - ${ZWAVE_JS_LOCAL_PORT}:3000 # port for Z-Wave JS websocket server
    volumes:
      - /srv/config/home-assistant/zwave:/usr/src/app/store
    devices:
      - /dev/serial/by-id/usb-0658_0200-if00:/dev/zwave
    environment:
      # proxy
      VIRTUAL_HOST: ${ZWAVE_JS_HOST}
      VIRTUAL_PORT: 8091
      LETSENCRYPT_HOST: ${ZWAVE_JS_HOST}
      LETSENCRYPT_EMAIL: ${MY_EMAIL}

      # app
      ZWAVEJS_EXTERNAL_CONFIG: /usr/src/app/store/.config-db
      TZ: ${TIME_ZONE}
    env_file:
      - secrets/zwave-js-ui.env
    networks:
      - hass
      - proxy-tier

  whisper:
    <<: *service_default
    image: rhasspy/wyoming-whisper:${WYOMING_WHISPER_VERSION}
    container_name: whisper
    depends_on:
      - hass
    ports:
      - 10300:10300
    volumes:
      - /srv/config/home-assistant/wyoming-whisper:/data
    command: --model=distil-small.en --language=en
    networks:
      - hass

  piper:
    <<: *service_default
    image: rhasspy/wyoming-piper:${WYOMING_PIPER_VERSION}
    container_name: piper
    depends_on:
      - hass
    ports:
      - 10200:10200
    volumes:
      - /srv/config/home-assistant/wyoming-piper:/data
    command: --voice=en_US-libritts_r-medium
    networks:
      - hass

  openwakeword:
    <<: *service_default
    image: rhasspy/wyoming-openwakeword:${WYOMING_OPENWAKEWORD_VERSION}
    container_name: openwakeword
    depends_on:
      - hass
    ports:
      - 10400:10400
    command: --preload-model=ok_nabu
    networks:
      - hass

  grafana-influxdb:
    <<: *service_default
    image: influxdb:${INFLUXDB_VERSION}
    container_name: grafana-influxdb
    depends_on:
      - hass
    ports:
      - ${INFLUXDB_LOCAL_PORT}:8086
    volumes:
      - /srv/config/grafana/influxdb:/var/lib/influxdb2
    networks:
      - grafana
      - hass

  nextcloud-app:
    build: ./nextcloud/app
    container_name: nextcloud-app
    tty: true # enable colorized logs
    restart: unless-stopped
    depends_on:
      - nextcloud-db
      - nextcloud-redis
    volumes:
      - /srv/config/nextcloud/app:/var/www/html
      # - /srv/config/nextcloud/opcache-recommended.ini:/usr/local/etc/php/conf.d/opcache-recommended.ini
      - ${PICTURES_DIR}:/var/www/html/data/artem/files/pictures
      - type: tmpfs
        target: /tmp:exec
    environment:
      # app
      PUID: ${UID}
      PGID: ${UID}
      MYSQL_HOST: nextcloud-db
      REDIS_HOST: nextcloud-redis
      MYSQL_DATABASE: ${NEXTCLOUD_DB_NAME}
      MYSQL_USER: ${NEXTCLOUD_DB_USER}
      MYSQL_PASSWORD_FILE: /run/secrets/db_password
      PHP_MEMORY_LIMIT: 2048M
    secrets:
      - db_password
    networks:
      - nextcloud

  nextcloud-server:
    build:
      context: ./nextcloud/server
      args:
        NEXTCLOUD_VERSION: ${NEXTCLOUD_VERSION}
    container_name: nextcloud-server
    hostname: nextcloud
    tty: true # enable colorized logs
    restart: unless-stopped
    depends_on:
      - nextcloud-app
    ports:
      - ${NEXTCLOUD_LOCAL_PORT}:80
    volumes:
      - /srv/config/nextcloud/app:/var/www/html:ro
    environment:
      # proxy
      VIRTUAL_HOST: ${NEXTCLOUD_HOST}
      VIRTUAL_PORT: 80
      LETSENCRYPT_HOST: ${NEXTCLOUD_HOST}
      LETSENCRYPT_EMAIL: ${MY_EMAIL}
    networks:
      - proxy-tier
      - nextcloud
      - hass

  nextcloud-cron:
    <<: *service_default
    image: nextcloud:fpm-alpine
    entrypoint: /cron.sh
    container_name: nextcloud-cron
    depends_on:
      - nextcloud-db
      - nextcloud-redis
    volumes:
      - /srv/config/nextcloud/app:/var/www/html
      - /srv/config/nextcloud/cron:/var/spool/cron/crontabs
    networks:
      - nextcloud

  nextcloud-db:
    <<: *service_default
    image: mariadb
    container_name: nextcloud-db
    command: --transaction-isolation=READ-COMMITTED --log-bin=binlog --binlog-format=ROW
    volumes:
      - /srv/config/nextcloud/db:/var/lib/mysql
    environment:
      # app
      MARIADB_AUTO_UPGRADE: 1
      MARIADB_DISABLE_UPGRADE_BACKUP: 1
      MYSQL_DATABASE: ${NEXTCLOUD_DB_NAME}
      MYSQL_USER: ${NEXTCLOUD_DB_USER}
      MYSQL_PASSWORD_FILE: /run/secrets/db_password
      MYSQL_ROOT_PASSWORD_FILE: /run/secrets/db_root_password
    secrets:
      - db_password
      - db_root_password
    networks:
      - nextcloud

  nextcloud-redis:
    <<: *service_default
    image: redis:alpine
    container_name: nextcloud-redis
    networks:
      - nextcloud

  calibre-web-books:
    <<: *service_default
    image: lscr.io/linuxserver/calibre-web:${CALIBRE_VERSION}
    container_name: calibre-web-books
    hostname: calibre-web-books
    ports:
      - ${CALIBRE_BOOKS_LOCAL_PORT}:8083/tcp
    volumes:
      - /srv/config/calibre/books:/config
      - ${BOOKS_DIR}:/books
    environment:
      # proxy
      VIRTUAL_HOST: ${CALIBRE_BOOKS_HOST}
      VIRTUAL_PORT: 8083
      LETSENCRYPT_HOST: ${CALIBRE_BOOKS_HOST}
      LETSENCRYPT_EMAIL: ${MY_EMAIL}

      # app
      PUID: ${UID}
      PGID: ${GID}
      TZ: ${TIME_ZONE}
      DOCKER_MODS: linuxserver/mods:universal-calibre # optional & x86-64 only Adds the ability to perform ebook conversion
    networks:
      - calibre
      - proxy-tier

  calibre-web-manuals:
    <<: *service_default
    image: lscr.io/linuxserver/calibre-web:${CALIBRE_VERSION}
    container_name: calibre-web-manuals
    hostname: calibre-web-manuals
    ports:
      - ${CALIBRE_MANUALS_LOCAL_PORT}:8083/tcp
    volumes:
      - /srv/config/calibre/manuals:/config
      - ${MANUALS_DIR}:/books
    environment:
      # proxy
      VIRTUAL_HOST: ${CALIBRE_MANUALS_HOST}
      VIRTUAL_PORT: 8083
      LETSENCRYPT_HOST: ${CALIBRE_MANUALS_HOST}
      LETSENCRYPT_EMAIL: ${MY_EMAIL}

      # app
      PUID: ${UID}
      PGID: ${GID}
      TZ: ${TIME_ZONE}
      DOCKER_MODS: linuxserver/mods:universal-calibre # optional & x86-64 only Adds the ability to perform ebook conversion
    networks:
      - calibre
      - proxy-tier

  calibre:
    <<: *service_default
    image: lscr.io/linuxserver/calibre:${CALIBRE_MNG_VERSION}
    container_name: calibre
    hostname: calibre
    ports:
      - ${CALIBRE_MNG_VNC_LOCAL_PORT}:8181/tcp
      - ${CALIBRE_MNG_LOCAL_PORT}:8081/tcp
    volumes:
      - /srv/config/calibre/manager.books:/config
      - ${BOOKS_DIR}:/books
    environment:
      # app
      PUID: ${UID}
      PGID: ${GID}
      TZ: ${TIME_ZONE}
    networks:
      - calibre
      - proxy-tier

  webtrees:
    <<: *service_default
    image: nathanvaughn/webtrees:${WEBTREES_VERSION}
    container_name: webtrees
    depends_on:
      - webtrees-db
    volumes:
      - /srv/config/webtrees/data:/var/www/webtrees/data
      - /srv/config/webtrees/themes:/var/www/webtrees/modules_v4
    environment:
      # proxy
      VIRTUAL_HOST: ${WEBTREES_HOST}
      VIRTUAL_PORT: 80
      LETSENCRYPT_HOST: ${WEBTREES_HOST}
      LETSENCRYPT_EMAIL: ${MY_EMAIL}

      # app
      PRETTY_URLS: true
      HTTPS: false
      HTTPS_REDIRECT: false
      LANG: en-US
      LOGIN_URL: "https://${WEBTREES_HOST}"
      SERVER_URL: "https://${WEBTREES_HOST}"
      BASE_URL: "https://${WEBTREES_HOST}"
      DB_TYPE: mysql
      DB_HOST: webtrees-db
      DB_PORT: 3306
      DB_NAME: ${WEBTREES_DB_NAME}
      DB_USER: ${WEBTREES_DB_USER}
      DB_PASS_FILE_FILE: /run/secrets/webtrees_db_password
      DB_PREFIX: wt_
      WT_NAME: ${MY_FULLNAME}
      WT_EMAIL: ${MY_EMAIL}
      WT_USER: ${MY_USERNAME}
      WT_PASS_FILE: /run/secrets/webtrees_password
    secrets:
      - webtrees_password
      - webtrees_db_password
    networks:
      - proxy-tier
      - webtrees

  webtrees-db:
    <<: *service_default
    image: mariadb
    container_name: webtrees-db
    command: --transaction-isolation=READ-COMMITTED --log-bin=binlog --binlog-format=ROW
    volumes:
      - /srv/config/webtrees/db:/var/lib/mysql
    environment:
      # app
      MARIADB_AUTO_UPGRADE: 1
      MARIADB_DISABLE_UPGRADE_BACKUP: 1
      MARIADB_DATABASE: ${WEBTREES_DB_NAME}
      MARIADB_USER: ${WEBTREES_DB_USER}
      MARIADB_PASSWORD_FILE: /run/secrets/webtrees_db_password
      MARIADB_ROOT_PASSWORD_FILE: /run/secrets/webtrees_db_root_password
    secrets:
      - webtrees_db_password
      - webtrees_db_root_password
    networks:
      - webtrees

  navidrome:
    <<: *service_default
    image: deluan/navidrome:${NAVIDROME_VERSION}
    container_name: navidrome
    hostname: navidrome
    user: ${UID}:${GID}
    ports:
      - ${NAVIDROME_LOCAL_PORT}:4533
    volumes:
      - /srv/config/navidrome:/data
      - ${MUSIC_DIR}:/music:ro
      - ${PLAYLISTS_DIR}:/playlists
    environment:
      # proxy
      VIRTUAL_HOST: ${NAVIDROME_HOST}
      VIRTUAL_PORT: 4533
      LETSENCRYPT_HOST: ${NAVIDROME_HOST}
      LETSENCRYPT_EMAIL: ${MY_EMAIL}

      # app
      ND_CONFIGFILE: /data/navidrome.toml
    networks:
      - proxy-tier

  immich:
    <<: *service_default
    image: ghcr.io/immich-app/immich-server:${IMMICH_VERSION:-release}
    container_name: immich
    hostname: immich
    depends_on:
      - immich-db
      - immich-redis
    ports:
      - ${IMMICH_LOCAL_PORT}:2283
    volumes:
      - /srv/zmedia/immich:/usr/src/app/upload
      - /etc/localtime:/etc/localtime:ro
    environment:
      # proxy
      VIRTUAL_HOST: ${IMMICH_HOST}
      VIRTUAL_PORT: 2283
      LETSENCRYPT_HOST: ${IMMICH_HOST}
      LETSENCRYPT_EMAIL: ${MY_EMAIL}

      # app
      DB_DATABASE_NAME: ${IMMICH_DB_NAME}
      DB_USERNAME: ${IMMICH_DB_USER}
      DB_PASSWORD: /run/secrets/immich_db_password
      DB_HOSTNAME: immich-db
      REDIS_HOSTNAME: immich-redis
      TZ: ${TIME_ZONE}
    secrets:
      - immich_db_password
    networks:
      - proxy-tier
      - immich

  immich-machine-learning:
    <<: *service_default
    image: ghcr.io/immich-app/immich-machine-learning:${IMMICH_VERSION:-release}
    container_name: immich-machine-learning
    # For hardware acceleration, add one of -[armnn, cuda, openvino] to the image tag.
    # Example tag: ${IMMICH_VERSION:-release}-cuda
    # extends: # uncomment this section for hardware acceleration - see https://immich.app/docs/features/ml-hardware-acceleration
    #   file: hwaccel.ml.yml
    #   service: cpu # set to one of [armnn, cuda, openvino, openvino-wsl] for accelerated inference - use the `-wsl` version for WSL2 where applicable
    volumes:
      - /srv/config/immich/cache:/cache
    networks:
      - immich

  immich-db:
    <<: *service_default
    image: tensorchord/pgvecto-rs:pg14-v0.2.0
    container_name: immich-db
    hostname: immich-db
    command: ["postgres", "-c" ,"shared_preload_libraries=vectors.so", "-c", 'search_path="$$user", public, vectors', "-c", "logging_collector=on", "-c", "max_wal_size=2GB", "-c", "shared_buffers=512MB", "-c", "wal_compression=on"]
    volumes:
      - /srv/config/immich/db:/var/lib/postgresql/data
    environment:
      # app
      POSTGRES_DB: ${IMMICH_DB_NAME}
      POSTGRES_USER: ${IMMICH_DB_USER}
      POSTGRES_PASSWORD: /run/secrets/immich_db_password
      POSTGRES_INITDB_ARGS: '--data-checksums'
    secrets:
      - immich_db_password
    networks:
      - immich

  immich-redis:
    <<: *service_default
    image: redis:alpine
    container_name: immich-redis
    networks:
      - immich

  digikam-db:
    <<: *service_default
    image: mariadb
    container_name: digikam-db
    ports:
      - ${DIGIKAM_PORT}:3306
    command: --max_allowed_packet=128M --transaction-isolation=READ-COMMITTED --log-bin=binlog --binlog-format=ROW
    volumes:
      - /srv/config/digikam/db:/var/lib/mysql
    environment:
      # app
      MARIADB_DATABASE: ${DIGIKAM_DB_NAME}
      MARIADB_USER: ${DIGIKAM_DB_USER}
      MARIADB_PASSWORD_FILE: /run/secrets/digikam_db_password
      MARIADB_ROOT_PASSWORD_FILE: /run/secrets/digikam_db_root_password
    secrets:
      - digikam_db_password
      - digikam_db_root_password

  plex:
    <<: *service_default
    image: plexinc/pms-docker:${PLEX_VERSION}
    container_name: plex-media-server
    hostname: plex-media-server
    ports:
      - ${PLEX_LOCAL_PORT}:32400/tcp
      - 8324:8324/tcp
      - 32469:32469/tcp
      - 1900:1900/udp
      - 32410:32410/udp
      - 32412:32412/udp
      - 32413:32413/udp
      - 32414:32414/udp
    volumes:
      - /srv/config/plex/config:/config
      - /srv/config/plex/transcode:/transcode
      - ${VIDEOS_DIR}:/data/videos
      - ${MUSIC_DIR}:/data/music
    environment:
      # proxy
      VIRTUAL_HOST: ${PLEX_HOST}
      VIRTUAL_PORT: 32400
      LETSENCRYPT_HOST: ${PLEX_HOST}
      LETSENCRYPT_EMAIL: ${MY_EMAIL}

      # app
      PLEX_CLAIM:
      PLEX_UID: ${UID}
      PLEX_GID: ${GID}
      TZ: ${TIME_ZONE}
    networks:
      - proxy-tier
      - hass

  jellyfin:
    <<: *service_default
    image: jellyfin/jellyfin:${JELLYFIN_VERSION}
    container_name: jellyfin
    hostname: jellyfin
    user: ${UID}:${GID}
    ports:
      - ${JELLYFIN_LOCAL_PORT}:8096/tcp
    volumes:
      - /srv/config/jellyfin/config:/config
      - /srv/config/jellyfin/cache:/cache
      - ${VIDEOS_DIR}:/media/videos:ro
    environment:
      # proxy
      VIRTUAL_HOST: ${JELLYFIN_HOST}
      VIRTUAL_PORT: 8096
      LETSENCRYPT_HOST: ${JELLYFIN_HOST}
      LETSENCRYPT_EMAIL: ${MY_EMAIL}
    networks:
      - proxy-tier
      - hass

  asf:
    <<: *service_default
    image: justarchi/archisteamfarm:${ASF_VERSION}
    container_name: asf
    volumes:
      - /srv/config/archi-steam-farm:/app/config
    environment:
      # proxy
      VIRTUAL_HOST: ${ASF_HOST}
      VIRTUAL_PORT: 1242
      LETSENCRYPT_HOST: ${ASF_HOST}
      LETSENCRYPT_EMAIL: ${MY_EMAIL}
    networks:
      - proxy-tier

  anki:
    <<: *service_default
    image: kuklinistvan/anki-sync-server:${ANKI_VERSION}
    container_name: anki
    volumes:
      - /srv/config/anki:/app/data
    environment:
      # proxy
      VIRTUAL_HOST: ${ANKI_HOST}
      VIRTUAL_PORT: 27701
      LETSENCRYPT_HOST: ${ANKI_HOST}
      LETSENCRYPT_EMAIL: ${MY_EMAIL}
    networks:
      - proxy-tier

  ollama:
    <<: *service_default
    image: ollama/ollama
    container_name: ollama
    hostname: ollama
    ports:
      - ${OLLAMA_LOCAL_PORT}:11434
    volumes:
      - ${CONFIG_DIR}/ollama:/root/.ollama
      - ${MEDIA_DIR}/ai/models.ollama:/root/.ollama/models
    networks:
      - hass
